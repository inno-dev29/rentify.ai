from django.db import models
from django.utils.translation import gettext_lazy as _
from users.models import User

class Amenity(models.Model):
    """
    Amenities that can be associated with properties
    """
    name = models.CharField(max_length=100, unique=True)
    icon = models.CharField(max_length=50, blank=True, null=True, help_text=_('Icon identifier'))
    
    class Meta:
        verbose_name = _('Amenity')
        verbose_name_plural = _('Amenities')
        
    def __str__(self):
        return self.name

class Property(models.Model):
    """
    Property listing model
    """
    class PropertyType(models.TextChoices):
        HOUSE = 'house', _('House')
        APARTMENT = 'apartment', _('Apartment')
        CONDO = 'condo', _('Condominium')
        TOWNHOUSE = 'townhouse', _('Townhouse')
        VILLA = 'villa', _('Villa')
        CABIN = 'cabin', _('Cabin')
        OTHER = 'other', _('Other')
    
    class ListingStatus(models.TextChoices):
        ACTIVE = 'active', _('Active')
        INACTIVE = 'inactive', _('Inactive')
        PENDING = 'pending', _('Pending Approval')
        ARCHIVED = 'archived', _('Archived')
    
    # Basic info
    title = models.CharField(max_length=200)
    description = models.TextField()
    leaser = models.ForeignKey(User, on_delete=models.CASCADE, related_name='properties')
    property_type = models.CharField(max_length=20, choices=PropertyType.choices, default=PropertyType.HOUSE)
    status = models.CharField(max_length=20, choices=ListingStatus.choices, default=ListingStatus.PENDING)
    
    # Location
    address_line1 = models.CharField(max_length=100)
    address_line2 = models.CharField(max_length=100, blank=True, null=True)
    city = models.CharField(max_length=50)
    state = models.CharField(max_length=50)
    postal_code = models.CharField(max_length=20)
    country = models.CharField(max_length=50)
    latitude = models.DecimalField(max_digits=9, decimal_places=6, blank=True, null=True)
    longitude = models.DecimalField(max_digits=9, decimal_places=6, blank=True, null=True)
    
    # Property details
    bedroom_count = models.PositiveIntegerField(default=1)
    bathroom_count = models.DecimalField(max_digits=3, decimal_places=1, default=1.0)
    max_guests = models.PositiveIntegerField(default=2)
    square_feet = models.PositiveIntegerField(blank=True, null=True)
    
    # Pricing
    base_price = models.DecimalField(max_digits=10, decimal_places=2, help_text=_('Base price per night'))
    cleaning_fee = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    service_fee = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    extra_guest_fee = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    min_nights = models.PositiveIntegerField(default=1)
    
    # Rules and policies
    house_rules = models.TextField(blank=True, null=True)
    cancellation_policy = models.TextField(blank=True, null=True)
    check_in_time = models.TimeField(blank=True, null=True)
    check_out_time = models.TimeField(blank=True, null=True)
    
    # Amenities
    amenities = models.ManyToManyField(Amenity, related_name='properties')
    
    # LLM generated content
    llm_summary = models.TextField(blank=True, null=True, help_text=_('Property summary generated by LLM'))
    
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = _('Property')
        verbose_name_plural = _('Properties')
        ordering = ['-created_at']
    
    def __str__(self):
        return self.title
    
    @property
    def primary_image(self):
        """Return the primary image for this property, or the first image if none is marked as primary"""
        primary = self.images.filter(is_primary=True).first()
        if primary:
            return primary
        return self.images.first()  # May return None if no images

class PropertyImage(models.Model):
    """
    Images associated with properties
    """
    property = models.ForeignKey(Property, related_name='images', on_delete=models.CASCADE)
    image = models.ImageField(upload_to='property_images')
    caption = models.CharField(max_length=200, blank=True, null=True)
    is_primary = models.BooleanField(default=False, help_text=_('Is this the primary property image'))
    upload_date = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = _('Property Image')
        verbose_name_plural = _('Property Images')
        ordering = ['-is_primary', 'upload_date']
    
    def __str__(self):
        return f"Image for {self.property.title}"
    
    def save(self, *args, **kwargs):
        """Ensure only one primary image per property"""
        if self.is_primary:
            # Set all other images of this property to not primary
            PropertyImage.objects.filter(property=self.property, is_primary=True).update(is_primary=False)
        super().save(*args, **kwargs)
